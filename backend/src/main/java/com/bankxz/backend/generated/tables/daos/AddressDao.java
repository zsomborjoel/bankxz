/*
 * This file is generated by jOOQ.
 */
package com.bankxz.backend.generated.tables.daos;


import com.bankxz.backend.generated.AbstractSpringDAOImpl;
import com.bankxz.backend.generated.tables.Address;
import com.bankxz.backend.generated.tables.records.AddressRecord;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.jooq.Configuration;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class AddressDao extends AbstractSpringDAOImpl<AddressRecord, com.bankxz.backend.generated.tables.pojos.Address, UUID> {

    /**
     * Create a new AddressDao without any configuration
     */
    public AddressDao() {
        super(Address.ADDRESS, com.bankxz.backend.generated.tables.pojos.Address.class);
    }

    /**
     * Create a new AddressDao with an attached configuration
     */
    @Autowired
    public AddressDao(Configuration configuration) {
        super(Address.ADDRESS, com.bankxz.backend.generated.tables.pojos.Address.class, configuration);
    }

    @Override
    public UUID getId(com.bankxz.backend.generated.tables.pojos.Address object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.bankxz.backend.generated.tables.pojos.Address> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Address.ADDRESS.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.bankxz.backend.generated.tables.pojos.Address> fetchById(UUID... values) {
        return fetch(Address.ADDRESS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.bankxz.backend.generated.tables.pojos.Address fetchOneById(UUID value) {
        return fetchOne(Address.ADDRESS.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<com.bankxz.backend.generated.tables.pojos.Address> fetchOptionalById(UUID value) {
        return fetchOptional(Address.ADDRESS.ID, value);
    }

    /**
     * Fetch records that have <code>postal_code BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.bankxz.backend.generated.tables.pojos.Address> fetchRangeOfPostalCode(String lowerInclusive, String upperInclusive) {
        return fetchRange(Address.ADDRESS.POSTAL_CODE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>postal_code IN (values)</code>
     */
    public List<com.bankxz.backend.generated.tables.pojos.Address> fetchByPostalCode(String... values) {
        return fetch(Address.ADDRESS.POSTAL_CODE, values);
    }

    /**
     * Fetch records that have <code>city BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.bankxz.backend.generated.tables.pojos.Address> fetchRangeOfCity(String lowerInclusive, String upperInclusive) {
        return fetchRange(Address.ADDRESS.CITY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>city IN (values)</code>
     */
    public List<com.bankxz.backend.generated.tables.pojos.Address> fetchByCity(String... values) {
        return fetch(Address.ADDRESS.CITY, values);
    }

    /**
     * Fetch records that have <code>street BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.bankxz.backend.generated.tables.pojos.Address> fetchRangeOfStreet(String lowerInclusive, String upperInclusive) {
        return fetchRange(Address.ADDRESS.STREET, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>street IN (values)</code>
     */
    public List<com.bankxz.backend.generated.tables.pojos.Address> fetchByStreet(String... values) {
        return fetch(Address.ADDRESS.STREET, values);
    }

    /**
     * Fetch records that have <code>house_number BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.bankxz.backend.generated.tables.pojos.Address> fetchRangeOfHouseNumber(String lowerInclusive, String upperInclusive) {
        return fetchRange(Address.ADDRESS.HOUSE_NUMBER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>house_number IN (values)</code>
     */
    public List<com.bankxz.backend.generated.tables.pojos.Address> fetchByHouseNumber(String... values) {
        return fetch(Address.ADDRESS.HOUSE_NUMBER, values);
    }

    /**
     * Fetch records that have <code>floor BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.bankxz.backend.generated.tables.pojos.Address> fetchRangeOfFloor(String lowerInclusive, String upperInclusive) {
        return fetchRange(Address.ADDRESS.FLOOR, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>floor IN (values)</code>
     */
    public List<com.bankxz.backend.generated.tables.pojos.Address> fetchByFloor(String... values) {
        return fetch(Address.ADDRESS.FLOOR, values);
    }

    /**
     * Fetch records that have <code>user_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.bankxz.backend.generated.tables.pojos.Address> fetchRangeOfUserId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Address.ADDRESS.USER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_id IN (values)</code>
     */
    public List<com.bankxz.backend.generated.tables.pojos.Address> fetchByUserId(UUID... values) {
        return fetch(Address.ADDRESS.USER_ID, values);
    }
}
