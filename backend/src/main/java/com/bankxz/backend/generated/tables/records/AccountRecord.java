/*
 * This file is generated by jOOQ.
 */
package com.bankxz.backend.generated.tables.records;


import com.bankxz.backend.generated.tables.Account;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccountRecord extends UpdatableRecordImpl<AccountRecord> implements Record5<UUID, UUID, BigDecimal, String, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.account.id</code>.
     */
    public void setId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.account.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.account.user_id</code>.
     */
    public void setUserId(UUID value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.account.user_id</code>.
     */
    public UUID getUserId() {
        return (UUID) get(1);
    }

    /**
     * Setter for <code>public.account.balance</code>.
     */
    public void setBalance(BigDecimal value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.account.balance</code>.
     */
    public BigDecimal getBalance() {
        return (BigDecimal) get(2);
    }

    /**
     * Setter for <code>public.account.currency</code>.
     */
    public void setCurrency(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.account.currency</code>.
     */
    public String getCurrency() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.account.opened_at</code>.
     */
    public void setOpenedAt(LocalDateTime value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.account.opened_at</code>.
     */
    public LocalDateTime getOpenedAt() {
        return (LocalDateTime) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<UUID, UUID, BigDecimal, String, LocalDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<UUID, UUID, BigDecimal, String, LocalDateTime> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return Account.ACCOUNT.ID;
    }

    @Override
    public Field<UUID> field2() {
        return Account.ACCOUNT.USER_ID;
    }

    @Override
    public Field<BigDecimal> field3() {
        return Account.ACCOUNT.BALANCE;
    }

    @Override
    public Field<String> field4() {
        return Account.ACCOUNT.CURRENCY;
    }

    @Override
    public Field<LocalDateTime> field5() {
        return Account.ACCOUNT.OPENED_AT;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public UUID component2() {
        return getUserId();
    }

    @Override
    public BigDecimal component3() {
        return getBalance();
    }

    @Override
    public String component4() {
        return getCurrency();
    }

    @Override
    public LocalDateTime component5() {
        return getOpenedAt();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public UUID value2() {
        return getUserId();
    }

    @Override
    public BigDecimal value3() {
        return getBalance();
    }

    @Override
    public String value4() {
        return getCurrency();
    }

    @Override
    public LocalDateTime value5() {
        return getOpenedAt();
    }

    @Override
    public AccountRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public AccountRecord value2(UUID value) {
        setUserId(value);
        return this;
    }

    @Override
    public AccountRecord value3(BigDecimal value) {
        setBalance(value);
        return this;
    }

    @Override
    public AccountRecord value4(String value) {
        setCurrency(value);
        return this;
    }

    @Override
    public AccountRecord value5(LocalDateTime value) {
        setOpenedAt(value);
        return this;
    }

    @Override
    public AccountRecord values(UUID value1, UUID value2, BigDecimal value3, String value4, LocalDateTime value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AccountRecord
     */
    public AccountRecord() {
        super(Account.ACCOUNT);
    }

    /**
     * Create a detached, initialised AccountRecord
     */
    public AccountRecord(UUID id, UUID userId, BigDecimal balance, String currency, LocalDateTime openedAt) {
        super(Account.ACCOUNT);

        setId(id);
        setUserId(userId);
        setBalance(balance);
        setCurrency(currency);
        setOpenedAt(openedAt);
        resetChangedOnNotNull();
    }
}
