buildscript {
	repositories {
		mavenLocal()
		mavenCentral()
	}

	dependencies {
		classpath 'org.jooq:jooq-codegen:3.18.3'
		classpath 'org.postgresql:postgresql:42.6.0'
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.6'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
}

apply plugin: 'java'

repositories {
	mavenLocal()
	mavenCentral()
}

ext {
	mapstructVersion = "1.4.2.Final"
	lombokVersion = "1.18.22"
	lombokMapstructBindingVersion = "0.2.0"
}

dependencies {
	implementation 'org.jooq:jooq:3.18.3'

	implementation "org.springframework.boot:spring-boot-starter-web"
	implementation "org.springframework.boot:spring-boot-starter-data-jpa"
	implementation "org.springframework.boot:spring-boot-starter-validation"

	implementation 'org.liquibase:liquibase-core:4.21.1'
	implementation 'org.mapstruct:mapstruct:1.4.2.Final'

	implementation 'org.postgresql:postgresql:42.6.0'
	testImplementation 'junit:junit:4.13.1'

	implementation "org.mapstruct:mapstruct:${mapstructVersion}", "org.projectlombok:lombok:${lombokVersion}"
	implementation 'org.apache.commons:commons-collections4:4.4'
	implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.0'

	compileOnly "org.projectlombok:lombok:${lombokVersion}"

	annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
	annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
	annotationProcessor "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructBindingVersion}"

	testImplementation("org.springframework.boot:spring-boot-starter-test") {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

compileJava {
	options.compilerArgs += [
			'-Amapstruct.defaultComponentModel=spring'
	]
}

import org.jooq.codegen.GenerationTool
import org.jooq.meta.jaxb.*

GenerationTool.generate(new Configuration()
		.withJdbc(new Jdbc()
				.withDriver('org.postgresql.Driver')
				.withUrl('jdbc:postgresql://localhost:5432/bankxz')
				.withUser('postgres')
				.withPassword('1234'))
		.withGenerator(new Generator()
				.withDatabase(new Database()
						.withName("org.jooq.meta.postgres.PostgresDatabase")
						.withInputSchema("public")
						.withIncludes(".*"))
				.withGenerate(new Generate()
						.withRelations(true)
						.withDeprecated(false)
						.withPojos(true)
						.withDaos(true))
				.withTarget(new Target()
						.withPackageName('com.bankxz.backend.generated')
						.withDirectory('/home/zsomborjoel/Git/bankxz/backend/src/main/java'))))